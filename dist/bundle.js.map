{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils/readFile.ts", "../src/testImageFile.ts"],
  "sourcesContent": ["export * from './testImageFile';\nexport function testuju() {}\n", "export type InputFile = Blob | File;\n\nexport type ProgressCallbackData = {\n  size: number;\n  loaded: number;\n};\n\nexport type InputFileOptions = {\n  progressCallback?: (loaded: ProgressCallbackData) => void;\n};\n\nexport type InputFileError = {\n  message: string;\n};\n\nexport function readFile(file: InputFile, options?: InputFileOptions): Promise<ArrayBuffer> {\n  return new Promise((resolve, reject) => {\n    const size = file.size;\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      const result = reader.result as ArrayBuffer;\n      resolve(result);\n    };\n\n    reader.onerror = () => {\n      reject({ message: 'Unable to read file.' } as InputFileError);\n    };\n\n    reader.onabort = () => {\n      reject({ message: 'Unable to read file - aborted.' } as InputFileError);\n    };\n\n    reader.onprogress = (e) => {\n      if (!options || !options.progressCallback) return;\n      const { loaded } = e;\n      options.progressCallback({ loaded, size });\n    };\n\n    reader.readAsArrayBuffer(file);\n  });\n}\n", "import { readFile } from './utils';\n\nexport function testImageFile(file: File | Blob | ArrayBuffer): Promise<unknown> {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let fileBuffer: ArrayBuffer;\n      if (file instanceof Blob || file instanceof File) {\n        fileBuffer = await readFile(file);\n      } else {\n        fileBuffer = file;\n      }\n      resolve(fileBuffer);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n"],
  "mappings": "ocAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,EAAA,YAAAC,ICeO,SAASC,EAASC,EAAiBC,EAAkD,CAC1F,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,IAAMC,EAAOJ,EAAK,KACZK,EAAS,IAAI,WAEnBA,EAAO,OAAS,IAAM,CACpB,IAAMC,EAASD,EAAO,OACtBH,EAAQI,CAAM,CAChB,EAEAD,EAAO,QAAU,IAAM,CACrBF,EAAO,CAAE,QAAS,sBAAuB,CAAmB,CAC9D,EAEAE,EAAO,QAAU,IAAM,CACrBF,EAAO,CAAE,QAAS,gCAAiC,CAAmB,CACxE,EAEAE,EAAO,WAAcE,GAAM,CACzB,GAAI,CAACN,GAAW,CAACA,EAAQ,iBAAkB,OAC3C,GAAM,CAAE,OAAAO,CAAO,EAAID,EACnBN,EAAQ,iBAAiB,CAAE,OAAAO,EAAQ,KAAAJ,CAAK,CAAC,CAC3C,EAEAC,EAAO,kBAAkBL,CAAI,CAC/B,CAAC,CACH,CCvCO,SAASS,EAAcC,EAAmD,CAC/E,OAAO,IAAI,QAAQ,MAAOC,EAASC,IAAW,CAC5C,GAAI,CACF,IAAIC,EACAH,aAAgB,MAAQA,aAAgB,KAC1CG,EAAa,MAAMC,EAASJ,CAAI,EAEhCG,EAAaH,EAEfC,EAAQE,CAAU,CACpB,OAASE,EAAK,CACZH,EAAOG,CAAG,CACZ,CACF,CAAC,CACH,CFfO,SAASC,GAAU,CAAC",
  "names": ["src_exports", "__export", "testImageFile", "testuju", "readFile", "file", "options", "resolve", "reject", "size", "reader", "result", "e", "loaded", "testImageFile", "file", "resolve", "reject", "fileBuffer", "readFile", "err", "testuju"]
}
